Ceci est la première version de mon fichier.

On va faire une "cheat sheet" sur git en français.

Cheat sheet de git
==================

Créer un dépot (repository) git
-------------------------------

Pour partir de rien:

```
> git init
```

Ou pour cloner un dépot existant

```
> git clone
```

Faire un premier commit
-----------------------

On crée un fichier.

```
> git status
```

On voit que le fichier apparait en rouge: il n'est pas dans le staging.
Pour le commiter plus tard, il faut d'abord qu'il soit mis dans le staging.
On va le mettre dans le staging avec la commande :

```
git add <file>
```

Puis quand on fait un `git status`, on verra que le fichier a été indexé dans le staging.
Le fichier est dit "staged".

```
git status
```

Ensuite on peut le committer avec 

```
git commit -m "initial commit"
```

L'option -m permet d'indiquer un message de commit, qui est obligatoire.
Si on fait un git status, on verra que le fichier a été commité et que tout est en ordre.

```
git status
```

Un fichier doit etre dans l'état staged pour etre commité. Ainsi si l'on modifie le fichier, il faut 
à nouveau faire un `git add` de ce fichier.

Le cycle de vie d'un fichier sous git est le suivant:
il y a 4 états:
- Non suivi
- suivi et non modifié
- suivi et modifié
- suivi, modifié et indexé.

Quand on crée un nouveau fichier <file>, il est dans l'état **Non suivi**.
Si on fait `git add <file>`, alors il passe dans l'état "suivi, modifié et indexé".
Si ensuite on fait un `git commit`, le fichier pass dans l'état "suivi et non modifié".
Si on modifie le fichier, il passe dans l'état "suivi et modifié"
Il faut faire à nouveau un `git add <file>` pour le mettre dans l'état "suivi, modifié et indexé".

La commande `git status` montre l'état de chaque fichier dans le repository.
Si le fichier est en rouge, alors c'est soit qu'il est non suivi, ou suivi et modifié.
Il faut faire un `git add` pour l'ajouter dans le staging (=l'index).
La commande `git status` montre l'état du fichier en vert si il est dans le staging prêt à être commité.

Attention, si on modifie le fichier après l'avoir mis dans le staging, le fichier passe à nouveau dans l'état
*suivi et modifié*. Si on fait un commit, ce ne sera pas la dernière version qui sera commitée mais celle qui est
dans le staging !

La commande `git status` met en rouge deux états:
- Non suivi: ROUGE
- suivi et non modifié: NON INDIQUE
- suivi et modifié: ROUGE
- suivi, modifié et indexé: VERT

Eviter de commiter quand il y a des choses en rouge, sinon vous ne commitez pas le snapshot, mais uniquement
ce qui a été mis dans le staging.

Effacer un fichier
------------------

Pour effacer un fichier d'un repository:
```
git rm <file>
```

Pour effacer un fichier du staging sans qu'il soit encore dans le repository, il faut utiliser `git rm --cached <file>`
ou `git rm -f <file>`

Il y a deux options: -f (force=effacer aussi le fichier du filesystem) et --cached (ne pas effacer le fichier du filesystem)

Le fichier doit être dans l'un des trois états suivi.
`git rm` va effacer du staging le fichier en question. Il va l'effacer aussi du filesystem si c'est l'option -f ou --force qui
est indiquée.

Toujours utiliser `git rm` avec `-f` ou `--cached`.















